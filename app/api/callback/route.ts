import { NextRequest, NextResponse } from 'next/server';
import { callbackFormSchema } from '@/lib/callback-form-schema';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const validatedData = callbackFormSchema.parse(body);

    const botToken = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;
    const chatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID;
    const unisenderApiUrl = process.env.UNISENDER_API_URL;

    if (!botToken || !chatId || !unisenderApiUrl) {
      console.error('Configuration missing:', {
        botToken: !!botToken,
        chatId: !!chatId,
        unisenderApiUrl: !!unisenderApiUrl,
      });
      return NextResponse.json(
        {
          success: false,
          error: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        },
        { status: 500 },
      );
    }

    // --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---
    const telegramPromise = fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫\n\nüë§ –§–ò–û: ${validatedData.lastName} ${validatedData.firstName} ${validatedData.middleName}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${validatedData.phone}\nüìß Email: ${validatedData.email}\n\n‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö: –î–∞`,
        parse_mode: 'Markdown',
      }),
    });

    // --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Unisender ---
    const unisenderPromise = fetch(unisenderApiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'contact.anodpo@yandex.ru',
        contactEmail: validatedData.email,
        contactPhone: validatedData.phone,
        lastName: validatedData.lastName,
        firstName: validatedData.firstName,
        middleName: validatedData.middleName,
        consentToProcessing: validatedData.consent,
      }),
    });

    const results = await Promise.allSettled([telegramPromise, unisenderPromise]);

    const successful = results.every((result) => result.status === 'fulfilled' && result.value.ok);

    if (!successful) {
      results.forEach((result, index) => {
        if (result.status === 'rejected' || !result.value.ok) {
          const service = index === 0 ? 'Telegram' : 'Unisender';
          console.error(`Error sending to ${service}:`, result);
        }
      });

      return NextResponse.json(
        {
          success: false,
          error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        },
        { status: 500 },
      );
    }

    console.log('Application sent successfully to all services.');

    return NextResponse.json(
      {
        success: true,
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      },
      { status: 200 },
    );
    
  } catch (error) {
    console.error('Callback form error:', error)
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Zod
    if (error && typeof error === 'object' && 'issues' in error) {
      const zodError = error as any
      const fieldErrors = zodError.issues.map((issue: any) => 
        `${issue.path.join('.')}: ${issue.message}`
      ).join(', ')
      
      return NextResponse.json(
        { 
          success: false, 
          error: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã',
          details: fieldErrors
        },
        { status: 400 }
      )
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
    if (error instanceof TypeError && error.message.includes('fetch')) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.' 
        },
        { status: 503 }
      )
    }
    
    // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    return NextResponse.json(
      { 
        success: false, 
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
      },
      { status: 500 }
    )
  }
}