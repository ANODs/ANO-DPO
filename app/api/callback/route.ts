import { NextRequest, NextResponse } from 'next/server'
import { callbackFormSchema, type CallbackFormData } from '@/lib/callback-form-schema'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    const validatedData = callbackFormSchema.parse(body)
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN
    const chatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID
    
    if (!botToken || !chatId) {
      console.error('Telegram configuration missing:', { botToken: !!botToken, chatId: !!chatId })
      return NextResponse.json(
        { 
          success: false, 
          error: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' 
        },
        { status: 500 }
      )
    }
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
    const message = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫\n\n` +
      `üë§ –§–ò–û: ${validatedData.lastName} ${validatedData.firstName} ${validatedData.middleName}\n` +
      `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${validatedData.phone}\n` +
      `üìß Email: ${validatedData.email}\n\n` +
      `‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö: –î–∞`
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown'
        })
      }
    )
    
    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.json()
      console.error('Telegram API error:', errorData)
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
        },
        { status: 500 }
      )
    }
    
    const telegramData = await telegramResponse.json()
    console.log('Message sent successfully:', telegramData.message_id)
    
    return NextResponse.json(
      { 
        success: true, 
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.' 
      },
      { status: 200 }
    )
    
  } catch (error) {
    console.error('Callback form error:', error)
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Zod
    if (error && typeof error === 'object' && 'issues' in error) {
      const zodError = error as any
      const fieldErrors = zodError.issues.map((issue: any) => 
        `${issue.path.join('.')}: ${issue.message}`
      ).join(', ')
      
      return NextResponse.json(
        { 
          success: false, 
          error: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã',
          details: fieldErrors
        },
        { status: 400 }
      )
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
    if (error instanceof TypeError && error.message.includes('fetch')) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.' 
        },
        { status: 503 }
      )
    }
    
    // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    return NextResponse.json(
      { 
        success: false, 
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
      },
      { status: 500 }
    )
  }
}